import React from "react";
import { useState, useEffect, useRef } from "react";
import { Link } from "react-router-dom";
import styled from "styled-components";
import { useLocation } from "react-router-dom";
import IconWithText from "../components/IconWithTExt";
import IconHome from "../assets/icons/home.png";
import IconSave from "../assets/icons/diskette.png";
import IconPrint from "../assets/icons/printing.png";
import ArtComponent from "../components/ArtComponent";
import EngravingArt from "../components/EngravingArt";
import InstallationForm from "../components/InstallationForm";
import html2canvas from "html2canvas";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { generateGoogleMapsLink } from "../utils/get_maps_url";

const WorkOrder = () => {
  const [selectedImage, setSelectedImage] = useState(null);
  const [uploadedImages, setUploadedImages] = useState([]);
  const [submissionSuccess, setSubmissionSuccess] = useState(false);
  const [workOrderSaved, setWorkOrderSaved] = useState(false);
  const [savingOrder, setSavingOrder] = useState(false);
  const [formData, setFormData] = useState({
    headStoneName: "",
    invoiceNo: "",
    date: "",
    customerEmail: "",
    customerName: "",
    customerPhone: "",
    cemeteryName: "",
    cemeteryAddress: "",
    cemeteryContact: "",
    lotNumber: "",
    cemeterySubmission: [],
    engravingSubmission: [],
    foundationInstall: [],
    monumentSetting: [],
    cemeteryApproval: [],
    finalArt: [],
  });

  const artComponentRef = useRef();
  const engravingArtRef = useRef();
  const installationFormRef = useRef();

  const triggerActionInChild = async () => {
    await artComponentRef.current.submitToArt();
    await engravingArtRef.current.submitToEngraving();
    await installationFormRef.current.submitToFoundation();
    await submitToCemetery();
    setSubmissionSuccess(true);
  };

  const location = useLocation();
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  useEffect(() => {
    if (!isAuthenticated) {
      navigate("/");
    }
  }, [isAuthenticated, navigate]);

  useEffect(() => {
    if (location.state) {
      setFormData(location.state);
      if (location.state?.cemeteryName === "Other") {
        setFormData((prevData) => ({
          ...prevData,
          cemeteryName: location.state?.customCemetery || "",
        }));
      }
      // Set uploaded images to cemeterySubmission
      if (location.state.cemeterySubmission) {
        const extractedBase64Images = location?.state?.cemeterySubmission?.map(
          (item) => item?.base64Data
        );
        setUploadedImages(extractedBase64Images);
      }
    }
  }, [location.state]);

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);

    // Convert uploaded images to base64 strings and store them
    const base64Images = [];

    const loadImages = async () => {
      for (const file of files) {
        const reader = new FileReader();
        reader.onload = () => {
          base64Images.push(reader.result);
          if (base64Images.length === files.length) {
            // When all images are loaded, update the state
            setUploadedImages((prevImages) => [...prevImages, ...base64Images]);
          }
        };
        reader.readAsDataURL(file);
      }
    };

    loadImages();
  };

  const removeThumbnail = (index) => {
    const updatedImages = [...uploadedImages];
    updatedImages.splice(index, 1);
    setUploadedImages(updatedImages);
  };

  const handlePrint = () => {
    document.title = "Computerized Print";
    window.print();
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setSavingOrder(true);
      // Hide the input elements before capturing the screenshot
      const inputElements = document.querySelectorAll("input[type='file']");
      inputElements.forEach((input) => {
        input.style.display = "none";
      });

      // Capture the form as an image using html2canvas
      const canvas = await html2canvas(document.getElementById("work-order"));

      // Restore the visibility of input elements
      inputElements.forEach((input) => {
        input.style.display = "block";
      });

      // Convert the captured canvas to a Blob
      canvas.toBlob(async (blob) => {
        // Create a FormData object to send data to the server
        const formDataToSend = new FormData();
        formDataToSend.append(
          "workOrder",
          blob,
          `${formData.headStoneName}..${formData.invoiceNo}.png`
        );
        // Append each field of formData to finalFormData
        for (const key in formData) {
          if (formData.hasOwnProperty(key)) {
            formDataToSend.append(key, formData[key]);
          }
        }

        // Make a POST API call to the /work-order endpoint
        const response = await fetch(
          `${process.env.REACT_APP_API_URL}/work-order`,
          {
            method: "POST",
            headers: {
              "ngrok-skip-browser-warning": "69420",
            },
            body: formDataToSend,
          }
        );

        if (response.ok) {
          console.log("Work order submission successful!");
          setWorkOrderSaved(true);
          // Optionally, you can redirect or show a success message here
        } else {
          console.error("Work order submission failed.");
          // Handle the error, show an error message, or retry the submission
        }
        setSavingOrder(false); // Stop the saving process
      }, "image/png");
    } catch (error) {
      console.error("Error while submitting work order:", error);
      // Handle the error, show an error message, or retry the submission
      setSavingOrder(false); // Stop the saving process
    }
  };

  const submitToCemetery = async () => {
    try {
      const formDataToSend = new FormData();

      formDataToSend.append("headStoneName", formData.headStoneName);
      formDataToSend.append("invoiceNo", formData.invoiceNo);

      // Convert base64 strings to Blobs and append them
      uploadedImages.forEach((base64Image, index) => {
        const blob = dataURLtoBlob(base64Image);
        formDataToSend.append("images", blob, `image${index}.png`);
      });

      // Make the API call
      const response = await fetch(
        `${process.env.REACT_APP_API_URL}/submit-to-cemetery`,
        {
          method: "POST",
          headers: {
            "ngrok-skip-browser-warning": "69420",
          },
          body: formDataToSend,
        }
      );

      if (response.ok) {
        console.log("Submission to Cemetery successful!");
        // setSubmissionSuccess(true);
        // Optionally, you can redirect or show a success message here
      } else {
        console.error("Submission to Cemetery failed.");
        // Handle the error, show an error message, or retry the submission
      }
    } catch (error) {
      console.error("Error while submitting to Cemetery:", error);
      // Handle the error, show an error message, or retry the submission
    }
  };

  function dataURLtoBlob(dataURL) {
    const parts = dataURL.split(",");
    const contentType = parts[0].split(";")[0].split(":")[1];
    const raw = window.atob(parts[1]);
    const rawLength = raw.length;
    const uint8Array = new Uint8Array(rawLength);
    for (let i = 0; i < rawLength; i++) {
      uint8Array[i] = raw.charCodeAt(i);
    }
    return new Blob([uint8Array], { type: contentType });
  }

  const closeModal = () => {
    setWorkOrderSaved(false);
  };

  const handleThumbnailClick = (image) => {
    setSelectedImage(image);
  };

  const closeModalImg = () => {
    setSelectedImage(null);
  };

  return (
    <Container>
      <NavBar className="nav-bar">
        <StyledLink to="/landing-page">
          <IconWithText iconSrc={IconHome} text="Home" />
        </StyledLink>
        <UtilityContainer>
          {localStorage.getItem("role") !== "viewer" ? (
            <IconWithText
              iconSrc={IconSave}
              type="submit"
              text={
                savingOrder ? "Saving..." : workOrderSaved ? "Saved" : "Save"
              }
              onClick={handleSubmit}
            />
          ) : null}

          <IconWithText
            iconSrc={IconPrint}
            type="button"
            onClick={handlePrint}
            text="Print"
          />
        </UtilityContainer>
      </NavBar>
      <div id="work-order">
        <Header>
          <HeadstoneName>{formData.headStoneName}</HeadstoneName>
          <Details>
            <Detail>
              <DetailTitle>Invoice No:</DetailTitle>
              <DetailValue>{formData.invoiceNo}</DetailValue>
            </Detail>
            <Detail>
              <DetailTitle>Date:</DetailTitle>
              <DetailValue>{formData.date}</DetailValue>
            </Detail>
          </Details>
          <CustomerDetails>
            <Detail>
              <DetailTitle>Customer Name:</DetailTitle>
              <DetailValue>{formData.customerName}</DetailValue>
            </Detail>
            <Detail>
              <DetailTitle>Email:</DetailTitle>
              <DetailValue>{formData.customerEmail}</DetailValue>
            </Detail>
            <Detail>
              <DetailTitle>Phone Number:</DetailTitle>
              <DetailValue>{formData.customerPhone}</DetailValue>
            </Detail>
          </CustomerDetails>
        </Header>
        <CustomerDesign>
          <SectionTitle>Customer Design Approval</SectionTitle>
          <DesignForm>
            <InputLabel>Design Approved by Customer</InputLabel>
            {localStorage.getItem("role") !== "viewer" ? (
              <ImageInput
                type="file"
                name="images"
                multiple
                onChange={handleImageUpload}
              />
            ) : null}

            <ImagePreview>
              {uploadedImages &&
                uploadedImages.map((image, index) => (
                  <div key={index} className="thumbnail-container">
                    {/* {localStorage.getItem("role") !== "viewer" ? (
                      <span
                        className="delete-button"
                        onClick={() => removeThumbnail(index)}
                      >
                        &#x2716;
                      </span>
                    ) : null} */}

                    <Thumbnail
                      className="thumbnail"
                      src={image}
                      alt="Non-Image file"
                      onClick={() => handleThumbnailClick(image)}
                    />
                  </div>
                ))}
            </ImagePreview>
            {/* Modal for enlarged image */}
            {selectedImage && (
              <ModalOverlay onClick={closeModalImg}>
                <CloseButton onClick={closeModalImg}>X</CloseButton>
                <EnlargedImage src={selectedImage} alt="Enlarged Thumbnail" />
              </ModalOverlay>
            )}
            {localStorage.getItem("role") !== "viewer" ? (
              <SubmitButton
                type="button"
                onClick={submitToCemetery}
                disabled={uploadedImages.length <= 0 || submissionSuccess}
              >
                {submissionSuccess ? "Submitted" : "Submit to Cemetery"}
              </SubmitButton>
            ) : null}
          </DesignForm>
        </CustomerDesign>
        <ArtComponent
          headStoneName={formData.headStoneName}
          invoiceNo={formData.invoiceNo}
          finalArt={location.state?.finalArt || []}
          cemeteryApproval={location.state?.cemeteryApproval || []}
          ref={artComponentRef}
        />
        <EngravingArt
          headStoneName={formData.headStoneName}
          invoiceNo={formData.invoiceNo}
          oldEngravingImage={location.state?.engravingSubmission || []}
          ref={engravingArtRef}
        />
        <CemeteryInfo>
          <SectionTitle>Cemetery Information</SectionTitle>
          <CemeteryDetail>
            <DetailTitle>Cemetery Name:</DetailTitle>
            <DetailValue>{formData.cemeteryName}</DetailValue>
          </CemeteryDetail>
          <CemeteryDetail>
            <DetailTitle>Cemetery Address:</DetailTitle>
            <DetailValue>
              <a
                href={generateGoogleMapsLink(formData.cemeteryAddress)}
                target="blank"
              >
                {formData.cemeteryAddress}
              </a>
            </DetailValue>
          </CemeteryDetail>
          <CemeteryDetail>
            <DetailTitle>Cemetery Contact:</DetailTitle>
            <DetailValue>{formData.cemeteryContact}</DetailValue>
          </CemeteryDetail>
          <CemeteryDetail>
            <DetailTitle>Lot Number:</DetailTitle>
            <DetailValue>{formData.lotNumber}</DetailValue>
          </CemeteryDetail>
          <InstallationForm
            headStoneName={formData.headStoneName}
            invoiceNo={formData.invoiceNo}
            foundationInstall={location.state?.foundationInstall || []}
            monumentSetting={location.state?.monumentSetting || []}
            ref={installationFormRef}
          />
        </CemeteryInfo>
        {localStorage.getItem("role") !== "viewer" ? (
          <SubmitButton type="button" onClick={triggerActionInChild}>
            {submissionSuccess ? "Submitted" : "Submit to Upload"}
          </SubmitButton>
        ) : null}
      </div>
      {workOrderSaved && (
        <SuccessModal>
          <SuccessModalContent>
            <h2>Work Order Saved Successfully</h2>
            <button onClick={closeModal}>Close</button>
          </SuccessModalContent>
        </SuccessModal>
      )}
    </Container>
  );
};

export default WorkOrder;

const Container = styled.div`
  width: 100%;
  max-width: 900px;
  margin: 0 auto;

  @media print {
    .nav-bar {
      display: none;
    }
    title {
      display: none;
    }
  }
`;

const StyledLink = styled(Link)`
  text-decoration: none;
  color: #000;
`;

const NavBar = styled.nav`
  background: white;
  display: flex;
  align-items: center;
  padding: 15px;
  border: 2px solid grey;
  @media (max-width: 768px) {
    justify-content: space-between;
  }
`;

const UtilityContainer = styled.div`
  display: flex;
  gap: 30px;
  margin-left: auto;
`;

const Header = styled.div`
  background-color: #f5f5f5;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
`;

const HeadstoneName = styled.h2`
  font-size: 28px;
  color: #333;
  margin-bottom: 10px;
`;

const Details = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 40px;
  margin-top: 20px;
`;

const CustomerDetails = styled.div`
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  gap: 30px;
  margin-top: 20px;
`;

const Detail = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
`;

const DetailTitle = styled.h3`
  font-size: 16px;
  color: #777;
  margin-bottom: 5px;
`;

const DetailValue = styled.p`
  font-size: 18px;
  color: #333;
`;

const CustomerDesign = styled.div`
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  background: #57facb;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
  margin-top: 20px;
`;

const SectionTitle = styled.h3`
  font-size: 24px;
  color: #333;
  margin-bottom: 15px;
`;

const DesignForm = styled.div`
  margin-top: 20px;
`;

const InputLabel = styled.label`
  font-size: 16px;
  color: #333;
  font-weight: bold;
  display: block;
  margin-bottom: 10px;
`;

const ImageInput = styled.input`
  display: block;
  margin-bottom: 10px;
`;

const ImagePreview = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;

  .thumbnail-container {
    position: relative;
    margin: 5px;
  }

  .thumbnail {
    max-width: 100px;
    max-height: 100px;
    border: 1px solid #ddd;
  }

  .delete-button {
    position: absolute;
    top: 5px;
    right: 5px;
    cursor: pointer;
    color: #f00; /* Red color */
    font-size: 20px;
  }
`;

const Thumbnail = styled.img`
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 5px;
  margin: 10px;
  cursor: pointer;
`;

const SubmitButton = styled.button`
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: #0056b3;
  }
`;

const CemeteryInfo = styled.div`
  background: #f5f5f5;
  width: 100%;
  margin: 20px auto;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
`;

const CemeteryDetail = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 15px;

  @media (min-width: 768px) {
    flex-direction: row;
    justify-content: space-between;
  }
`;

const SuccessModal = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const SuccessModalContent = styled.div`
  background: #fff;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
  position: relative;
  max-width: 400px; /* Adjust the width as needed */
  text-align: center;

  h2 {
    font-size: 24px;
    color: #333;
    margin-bottom: 15px;
  }

  button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;

    &:hover {
      background-color: #0056b3;
    }
  }
`;

const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
`;

const EnlargedImage = styled.img`
  max-width: 75%;
  max-height: 75%;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 30px;
  right: 30px;
  background-color: transparent;
  border: none;
  color: red;
  font-size: 30px;
  font-weight: bold;
  cursor: pointer;
`;

import React, {
  useState,
  useEffect,
  forwardRef,
  useImperativeHandle,
} from "react";
import styled from "styled-components";

const ArtComponent = forwardRef(
  ({ headStoneName, invoiceNo, finalArt, cemeteryApproval }, ref) => {
    const [selectedImage, setSelectedImage] = useState(null);
    const [finalArtImagesBase64, setFinalArtImagesBase64] = useState([]);
    const [cemeteryApprovalImagesBase64, setCemeteryApprovalImagesBase64] =
      useState([]);
    const [submissionSuccess, setSubmissionSuccess] = useState(false);

    // useEffect to set image states
    useEffect(() => {
      if (finalArt && finalArt.length > 0) {
        const extractedBase64Images = finalArt.map((item) => item?.base64Data);
        setFinalArtImagesBase64(extractedBase64Images);
      }
      if (cemeteryApproval && cemeteryApproval.length > 0) {
        const extractedBase64CemeteryImages = cemeteryApproval.map(
          (item) => item?.base64Data
        );
        setCemeteryApprovalImagesBase64(extractedBase64CemeteryImages);
      }
    }, [finalArt, cemeteryApproval]);

    const handleFinalArtUpload = (e) => {
      const files = Array.from(e.target.files);

      const loadImages = async () => {
        for (const file of files) {
          const reader = new FileReader();

          reader.onload = () => {
            setFinalArtImagesBase64((prevImages) => [
              ...prevImages,
              reader.result,
            ]);
          };

          reader.readAsDataURL(file);
        }
      };

      loadImages();
    };

    // Handle multiple cemetery approval uploads
    const handleCemeteryApprovalUpload = (e) => {
      const files = Array.from(e.target.files);

      const loadImages = async () => {
        for (const file of files) {
          const reader = new FileReader();

          reader.onload = () => {
            setCemeteryApprovalImagesBase64((prevImages) => [
              ...prevImages,
              reader.result,
            ]);
          };

          reader.readAsDataURL(file);
        }
      };

      loadImages();
    };

    useImperativeHandle(ref, () => ({
      submitToArt: async () => {
        // e.preventDefault();

        if (
          finalArtImagesBase64.length > 0 ||
          cemeteryApprovalImagesBase64.length > 0
        ) {
          try {
            const formDataToSend = new FormData();
            formDataToSend.append("headstoneName", headStoneName);
            formDataToSend.append("invoiceNo", invoiceNo);
            formDataToSend.append(
              "finalArtLength",
              finalArtImagesBase64.length
            );
            formDataToSend.append(
              "cemeteryArtLength",
              cemeteryApprovalImagesBase64.length
            );

            // Append final art images
            finalArtImagesBase64.forEach((base64Image, index) => {
              const blob = dataURLtoBlob(base64Image);
              formDataToSend.append(
                `finalArtImages`,
                blob,
                `image${index}.png`
              );
            });

            cemeteryApprovalImagesBase64.forEach((base64Image, index) => {
              const blob = dataURLtoBlob(base64Image);
              formDataToSend.append(
                `finalArtImages`,
                blob,
                `image${index}.png`
              );
            });

            // Make a POST request to your API endpoint
            const response = await fetch(
              `${process.env.REACT_APP_API_URL}/art-submission`,
              {
                method: "POST",
                headers: {
                  "ngrok-skip-browser-warning": "69420",
                },
                body: formDataToSend,
              }
            );

            if (response.ok) {
              // Handle successful response (e.g., show a success message)
              console.log("Art submission successful!");
              setSubmissionSuccess(true);
            } else {
              // Handle error response
              console.error("Art submission failed.");
            }
          } catch (error) {
            console.error("Error submitting art:", error);
          }
        } else {
          console.log("No images to submit");
        }
      },
    }));

    const removeFinalArtImage = (index) => {
      const updatedImages = [...finalArtImagesBase64];
      updatedImages.splice(index, 1);
      setFinalArtImagesBase64(updatedImages);
    };

    const removeCemeteryApprovalImage = (index) => {
      const updatedImages = [...cemeteryApprovalImagesBase64];
      updatedImages.splice(index, 1);
      setCemeteryApprovalImagesBase64(updatedImages);
    };

    function dataURLtoBlob(dataURL) {
      const parts = dataURL.split(",");
      const contentType = parts[0].split(";")[0].split(":")[1];
      const raw = window.atob(parts[1]);
      const rawLength = raw.length;
      const uint8Array = new Uint8Array(rawLength);
      for (let i = 0; i < rawLength; i++) {
        uint8Array[i] = raw.charCodeAt(i);
      }
      return new Blob([uint8Array], { type: contentType });
    }

    const handleThumbnailClick = (image) => {
      setSelectedImage(image);
    };

    const closeModalImg = () => {
      setSelectedImage(null);
    };

    return (
      <ArtContainer>
        <h3>Artwork Submission</h3>
        <ArtForm>
          <InputLabel>Final Art</InputLabel>
          {localStorage.getItem("role") !== "viewer" ? (
            <ImageInput
              type="file"
              name="finalArtImages"
              multiple
              onChange={handleFinalArtUpload}
            />
          ) : null}

          <ImagePreview>
            {finalArtImagesBase64.map((base64Image, index) => (
              <div key={index} className="thumbnail-container">
                {/* {localStorage.getItem("role") !== "viewer" ? (
                  <span
                    className="delete-button"
                    onClick={() => removeFinalArtImage(index)}
                  >
                    &#x2716;
                  </span>
                ) : null} */}

                <ThumbnailArt
                  src={base64Image}
                  alt="Non-image file"
                  onClick={() => handleThumbnailClick(base64Image)}
                />
              </div>
            ))}
          </ImagePreview>
          {selectedImage && (
            <ModalOverlay onClick={closeModalImg}>
              <CloseButton onClick={closeModalImg}>X</CloseButton>
              <EnlargedImage src={selectedImage} alt="Enlarged Thumbnail" />
            </ModalOverlay>
          )}
          <InputLabel>Cemetery Approval</InputLabel>
          {localStorage.getItem("role") !== "viewer" ? (
            <ImageInput
              type="file"
              multiple // Allow multiple file selection
              onChange={handleCemeteryApprovalUpload}
            />
          ) : null}

          <ImagePreview>
            {cemeteryApprovalImagesBase64.map((base64Image, index) => (
              <div key={index} className="thumbnail-container">
                {/* {localStorage.getItem("role") !== "viewer" ? (
                  <span
                    className="delete-button"
                    onClick={() => removeCemeteryApprovalImage(index)}
                  >
                    &#x2716;
                  </span>
                ) : null} */}

                <Thumbnail
                  src={base64Image}
                  alt="Non-image file"
                  onClick={() => handleThumbnailClick(base64Image)}
                />
              </div>
            ))}
          </ImagePreview>
          {/* {localStorage.getItem("role") !== "viewer" ? (
              <SubmitButton type="button" onClick={submitToArt}>
                {submissionSuccess ? "Submitted" : "Submit to Engraving"}
              </SubmitButton>
            ) : null} */}
        </ArtForm>
      </ArtContainer>
    );
  }
);

export default ArtComponent;

const ArtContainer = styled.div`
  background-color: #f5f5f5;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
  margin-top: 20px;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  h3 {
    font-size: 24px;
  }
`;

const ArtForm = styled.div`
  margin-top: 20px;
`;

const InputLabel = styled.label`
  font-size: 16px;
  color: #333;
  display: block;
  font-weight: bold;
  margin-bottom: 10px;
`;

const ImageInput = styled.input`
  display: block;
  margin-bottom: 10px;
`;

const ImagePreview = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;

  .thumbnail-container {
    position: relative;
    margin: 5px;
  }

  .thumbnail {
    max-width: 100px;
    max-height: 100px;
    border: 1px solid #ddd;
  }

  .delete-button {
    position: absolute;
    top: 5px;
    right: 5px;
    cursor: pointer;
    color: #f00; /* Red color */
    font-size: 20px;
  }
`;

const Thumbnail = styled.img`
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 5px;
  margin: 10px;
  cursor: pointer;
`;

const ThumbnailArt = styled.img`
  width: 200px;
  height: 200px;
  object-fit: cover;
  border-radius: 5px;
  margin: 10px;
  cursor: pointer;
`;

const SubmitButton = styled.button`
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: #0056b3;
  }
`;

const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
`;

const EnlargedImage = styled.img`
  max-width: 75%;
  max-height: 75%;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 30px;
  right: 30px;
  background-color: transparent;
  border: none;
  color: red;
  font-size: 30px;
  font-weight: bold;
  cursor: pointer;
`;

import React, {
  useState,
  useEffect,
  forwardRef,
  useImperativeHandle,
} from "react";
import styled from "styled-components";

const EngravingArt = forwardRef(
  ({ headStoneName, invoiceNo, oldEngravingImage }, ref) => {
    const [engravingImagesBase64, setEngravingImagesBase64] = useState([]);
    const [submissionSuccess, setSubmissionSuccess] = useState(false);
    const [selectedImage, setSelectedImage] = useState(null);

    useEffect(() => {
      if (oldEngravingImage && oldEngravingImage.length > 0) {
        const extractedBase64Images = oldEngravingImage.map(
          (item) => item?.base64Data
        );
        setEngravingImagesBase64(extractedBase64Images);
      }
    }, [oldEngravingImage]);

    const handleEngravingImageUpload = (e) => {
      const files = Array.from(e.target.files);

      const loadImages = async () => {
        for (const file of files) {
          const reader = new FileReader();

          reader.onload = () => {
            setEngravingImagesBase64((prevImages) => [
              ...prevImages,
              reader.result,
            ]);
          };

          reader.readAsDataURL(file);
        }
      };

      loadImages();
    };
    useImperativeHandle(ref, () => ({
      submitToEngraving: async () => {
        // e.preventDefault();

        try {
          if (engravingImagesBase64.length === 0) {
            console.error("No engraving images have been selected.");
            return;
          }

          const formDataToSend = new FormData();
          formDataToSend.append("headstoneName", headStoneName);
          formDataToSend.append("invoiceNo", invoiceNo);

          engravingImagesBase64.forEach((base64Image, index) => {
            const blob = dataURLtoBlob(base64Image);
            formDataToSend.append(
              `engravingImages`,
              blob,
              `engraving${index}.png`
            );
          });

          const response = await fetch(
            `${process.env.REACT_APP_API_URL}/engraving-submission`,
            {
              method: "POST",
              headers: {
                "ngrok-skip-browser-warning": "69420",
              },
              body: formDataToSend,
            }
          );

          if (response.ok) {
            console.log("Engraving submission successful!");
            setSubmissionSuccess(true);
          } else {
            console.error("Engraving submission failed.");
          }
        } catch (error) {
          console.error("Error submitting engraving:", error);
        }
      },
    }));

    function dataURLtoBlob(dataURL) {
      const parts = dataURL.split(",");
      const contentType = parts[0].split(";")[0].split(":")[1];
      const raw = window.atob(parts[1]);
      const rawLength = raw.length;
      const uint8Array = new Uint8Array(rawLength);
      for (let i = 0; i < rawLength; i++) {
        uint8Array[i] = raw.charCodeAt(i);
      }
      return new Blob([uint8Array], { type: contentType });
    }

    const removeEngravingImage = (index) => {
      const updatedImages = [...engravingImagesBase64];
      updatedImages.splice(index, 1);
      setEngravingImagesBase64(updatedImages);
    };
    const handleThumbnailClick = (image) => {
      setSelectedImage(image);
    };

    const closeModalImg = () => {
      setSelectedImage(null);
    };

    return (
      <EngravingContainer>
        <h3>Engraving Submission</h3>
        <EngravingForm>
          <InputLabel>Photos of Engraving</InputLabel>
          {localStorage.getItem("role") !== "viewer" ? (
            <ImageInput
              type="file"
              multiple
              onChange={handleEngravingImageUpload}
            />
          ) : null}

          <ImagePreview>
            {engravingImagesBase64.map((base64Image, index) => (
              <div key={index} className="thumbnail-container">
                {/* {localStorage.getItem("role") !== "viewer" ? (
                  <span
                    className="delete-button"
                    onClick={() => removeEngravingImage(index)}
                  >
                    &#x2716;
                  </span>
                ) : null} */}

                <Thumbnail
                  src={base64Image}
                  alt={`Engraving ${index}`}
                  onClick={() => handleThumbnailClick(base64Image)}
                />
              </div>
            ))}
          </ImagePreview>
          {selectedImage && (
            <ModalOverlay onClick={closeModalImg}>
              <CloseButton onClick={closeModalImg}>X</CloseButton>
              <EnlargedImage src={selectedImage} alt="Enlarged Thumbnail" />
            </ModalOverlay>
          )}
          {/* {localStorage.getItem("role") !== "viewer" ? (
              <SubmitButton
                type="button"
                onClick={submitToEngraving}
                disabled={engravingImagesBase64.length === 0 || submissionSuccess}
              >
                {submissionSuccess ? "Submitted" : "Submit to Install"}
              </SubmitButton>
            ) : null} */}
        </EngravingForm>
      </EngravingContainer>
    );
  }
);

export default EngravingArt;

const EngravingContainer = styled.div`
  background: #eec843;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
  margin-top: 20px;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  h3 {
    font-size: 24px;
  }
`;

const EngravingForm = styled.div`
  margin-top: 20px;
`;

const InputLabel = styled.label`
  font-size: 16px;
  color: #333;
  display: block;
  font-weight: bold;
  margin-bottom: 10px;
`;

const ImageInput = styled.input`
  display: block;
  margin-bottom: 10px;
`;

const ImagePreview = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;

  .thumbnail-container {
    position: relative;
    margin: 5px;
  }

  .thumbnail {
    max-width: 100px;
    max-height: 100px;
    border: 1px solid #ddd;
  }

  .delete-button {
    position: absolute;
    top: 5px;
    right: 5px;
    cursor: pointer;
    color: #f00; /* Red color */
    font-size: 20px;
  }
`;

const Thumbnail = styled.img`
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 5px;
  margin: 10px;
  cursor: pointer;
`;

const SubmitButton = styled.button`
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: #0056b3;
  }
`;
const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
`;

const EnlargedImage = styled.img`
  max-width: 75%;
  max-height: 75%;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 30px;
  right: 30px;
  background-color: transparent;
  border: none;
  color: red;
  font-size: 30px;
  font-weight: bold;
  cursor: pointer;
`;

import React, {
  useState,
  useEffect,
  forwardRef,
  useImperativeHandle,
} from "react";
import styled from "styled-components";

const InstallationForm = forwardRef(
  ({ headStoneName, invoiceNo, foundationInstall, monumentSetting }, ref) => {
    const [foundationInstallImagesBase64, setFoundationInstallImagesBase64] =
      useState([]);
    const [monumentSettingImagesBase64, setMonumentSettingImagesBase64] =
      useState([]);
    const [submissionSuccess, setSubmissionSuccess] = useState(false);
    const [selectedImage, setSelectedImage] = useState(null);

    useEffect(() => {
      if (foundationInstall && foundationInstall.length > 0) {
        const extractedBase64Images = foundationInstall.map(
          (item) => item?.base64Data
        );
        setFoundationInstallImagesBase64(extractedBase64Images);
      }
      if (monumentSetting && monumentSetting.length > 0) {
        const extractedBase64MonumentImages = monumentSetting.map(
          (item) => item?.base64Data
        );
        setMonumentSettingImagesBase64(extractedBase64MonumentImages);
      }
    }, [foundationInstall, monumentSetting]);

    const handleFoundationInstallUpload = (e) => {
      const files = Array.from(e.target.files);

      const loadImages = async () => {
        for (const file of files) {
          const reader = new FileReader();

          reader.onload = () => {
            setFoundationInstallImagesBase64((prevImages) => [
              ...prevImages,
              reader.result,
            ]);
          };

          reader.readAsDataURL(file);
        }
      };

      loadImages();
    };

    const handleMonumentSettingUpload = (e) => {
      const files = Array.from(e.target.files);

      const loadImages = async () => {
        for (const file of files) {
          const reader = new FileReader();

          reader.onload = () => {
            setMonumentSettingImagesBase64((prevImages) => [
              ...prevImages,
              reader.result,
            ]);
          };

          reader.readAsDataURL(file);
        }
      };

      loadImages();
    };

    const removeFoundationImage = (index) => {
      const updatedImages = [...foundationInstallImagesBase64];
      updatedImages.splice(index, 1);
      setFoundationInstallImagesBase64(updatedImages);
    };

    const removeMonumentImage = (index) => {
      const updatedImages = [...monumentSettingImagesBase64];
      updatedImages.splice(index, 1);
      setMonumentSettingImagesBase64(updatedImages);
    };

    useImperativeHandle(ref, () => ({
      submitToFoundation: async () => {
        // e.preventDefault();

        if (
          foundationInstallImagesBase64.length > 0 ||
          monumentSettingImagesBase64.length > 0
        ) {
          try {
            const formDataToSend = new FormData();
            formDataToSend.append("headstoneName", headStoneName);
            formDataToSend.append("invoiceNo", invoiceNo);
            formDataToSend.append(
              "foundationImagesLength",
              foundationInstallImagesBase64.length
            );
            formDataToSend.append(
              "monumentImagesLength",
              monumentSettingImagesBase64.length
            );

            // Append foundation install images
            foundationInstallImagesBase64.forEach((base64Image, index) => {
              const blob = dataURLtoBlob(base64Image);
              formDataToSend.append(
                `foundationInstallImages`,
                blob,
                `image${index}.png`
              );
            });

            // Append monument setting images
            monumentSettingImagesBase64.forEach((base64Image, index) => {
              const blob = dataURLtoBlob(base64Image);
              formDataToSend.append(
                `foundationInstallImages`,
                blob,
                `image${index}.png`
              );
            });

            // Make a POST request to your API endpoint
            const response = await fetch(
              `${process.env.REACT_APP_API_URL}/foundation-submission`,
              {
                method: "POST",
                headers: {
                  "ngrok-skip-browser-warning": "69420",
                },
                body: formDataToSend,
              }
            );

            if (response.ok) {
              // Handle successful response (e.g., show a success message)
              console.log("Foundation/Setting submission successful!");
              setSubmissionSuccess(true);
            } else {
              // Handle error response
              console.error("Foundation/Setting submission failed.");
            }
          } catch (error) {
            console.error("Error submitting Foundation/Setting:", error);
          }
        } else {
          console.log("No images uploaded..");
        }
      },
    }));

    const handleThumbnailClick = (image) => {
      setSelectedImage(image);
    };

    const closeModalImg = () => {
      setSelectedImage(null);
    };

    return (
      <FormContainer>
        <InputLabel>Foundation Install</InputLabel>
        {localStorage.getItem("role") !== "viewer" ? (
          <ImageInput
            type="file"
            name="foundationInstallImages"
            multiple
            onChange={handleFoundationInstallUpload}
          />
        ) : null}

        <ImagePreview>
          {foundationInstallImagesBase64.map((image, index) => (
            <div key={index} className="thumbnail-container">
              {/* {localStorage.getItem("role") !== "viewer" ? (
                <span
                  className="delete-button"
                  onClick={() => removeFoundationImage(index)}
                >
                  &#x2716;
                </span>
              ) : null} */}

              <Thumbnail
                src={image}
                alt="Non-image file"
                onClick={() => handleThumbnailClick(image)}
              />
            </div>
          ))}
        </ImagePreview>
        {selectedImage && (
          <ModalOverlay onClick={closeModalImg}>
            <CloseButton onClick={closeModalImg}>X</CloseButton>
            <EnlargedImage src={selectedImage} alt="Enlarged Thumbnail" />
          </ModalOverlay>
        )}
        <InputLabel>Monument Setting</InputLabel>
        {localStorage.getItem("role") !== "viewer" ? (
          <ImageInput
            type="file"
            name="monumentSettingImages"
            multiple // Allow multiple monument setting images
            onChange={handleMonumentSettingUpload}
          />
        ) : null}

        <ImagePreview>
          {/* Display monument setting images */}
          {monumentSettingImagesBase64.map((image, index) => (
            <div key={index} className="thumbnail-container">
              {/* {localStorage.getItem("role") !== "viewer" ? (
                <span
                  className="delete-button"
                  onClick={() => removeMonumentImage(index)}
                >
                  &#x2716;
                </span>
              ) : null} */}

              <Thumbnail
                src={image}
                alt="Non-image file"
                onClick={() => handleThumbnailClick(image)}
              />
            </div>
          ))}
        </ImagePreview>
        {/* {localStorage.getItem("role") !== "viewer" ? (
            <SubmitButton type="button" onClick={submitToFoundation}>
              {submissionSuccess ? "Submitted" : "Submit to Upload"}
            </SubmitButton>
          ) : null} */}
      </FormContainer>
    );
  }
);

function dataURLtoBlob(dataURL) {
  const parts = dataURL.split(",");
  const contentType = parts[0].split(";")[0].split(":")[1];
  const raw = window.atob(parts[1]);
  const rawLength = raw.length;
  const uint8Array = new Uint8Array(rawLength);

  for (let i = 0; i < rawLength; i++) {
    uint8Array[i] = raw.charCodeAt(i);
  }

  return new Blob([uint8Array], { type: contentType });
}

const FormContainer = styled.div`
  margin-top: 20px;
`;

const InputLabel = styled.label`
  font-size: 16px;
  color: #333;
  display: block;
  font-weight: bold;
  margin-bottom: 10px;
`;

const ImageInput = styled.input`
  display: block;
  margin-bottom: 10px;
`;

const ImagePreview = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 10px;

  .thumbnail-container {
    position: relative;
    margin: 5px;
  }

  .thumbnail {
    max-width: 100px;
    max-height: 100px;
    border: 1px solid #ddd;
  }

  .delete-button {
    position: absolute;
    top: 5px;
    right: 5px;
    cursor: pointer;
    color: #f00; /* Red color */
    font-size: 20px;
  }
`;

const Thumbnail = styled.img`
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 5px;
  margin: 10px;
  cursor: pointer;
`;

const SubmitButton = styled.button`
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;

  &:hover {
    background-color: #0056b3;
  }
`;
const ModalOverlay = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
`;

const EnlargedImage = styled.img`
  max-width: 75%;
  max-height: 75%;
`;

const CloseButton = styled.button`
  position: absolute;
  top: 30px;
  right: 30px;
  background-color: transparent;
  border: none;
  color: red;
  font-size: 30px;
  font-weight: bold;
  cursor: pointer;
`;

export default InstallationForm;
